{
        "openapi": "3.0.0",
        "info": {
            "title": "Lattice",
            "version": "1.0.0"
        },
        "servers": [
            {
                "url": "api.latticehq.com",
                "description": "Main (production) sever"
            }
        ],
        "security": [
            {
                "BearerAuth": []
            }
        ],
        "paths": {
            "/v1/customAttribute/{id}": {
                "get": {
                    "operationId": "API_customAttribute",
                    "description": "Returns the custom attribute with the given id. If cannot find the custom attribute, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/CustomAttribute"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/customAttributeValue/{id}": {
                "get": {
                    "operationId": "API_customAttributeValue",
                    "description": "Returns the custom attribute value with the given id. If cannot find the custom attribute, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/CustomAttributeValue"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/department/{id}": {
                "get": {
                    "operationId": "API_department",
                    "description": "Retuns a department with a given id. If cannot find department, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Department"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/departments": {
                "get": {
                    "operationId": "API_departments",
                    "description": "Returns a paginated list of all departments in Lattice",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Department"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/feedback/{id}": {
                "get": {
                    "operationId": "API_feedback",
                    "description": "Returns a feedback with the given id. If cannot find feedback, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Feedback"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/feedbacks": {
                "get": {
                    "operationId": "API_feedbacks",
                    "description": "Returns a paginated list of all continuous feedback in Lattice. Newest feedback will be returned first",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "onlyPublic",
                            "required": false,
                            "schema": {
                                "type": "boolean"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Feedback"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/competency/{id}": {
                "get": {
                    "operationId": "API_competency",
                    "description": "Returns a competency with the given id. If cannot find competency, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Competency"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/goal/{id}": {
                "get": {
                    "operationId": "API_goal",
                    "description": "Returns a goal with the given id. If cannot find goal, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Goal"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/goals": {
                "get": {
                    "operationId": "API_goals",
                    "description": "Returns a paginated list of goals in Lattice",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "state",
                            "required": false,
                            "schema": {
                                "$ref": "#/components/schemas/GoalStateEnum"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Goal"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/me": {
                "get": {
                    "operationId": "API_me",
                    "description": "Returns the current user the API token is associated with",
                    "tags": [],
                    "parameters": [],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/question/{id}": {
                "get": {
                    "operationId": "API_question",
                    "description": "Returns a review question with the given id. If cannot find review question, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Question"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/questionRevision/{id}": {
                "get": {
                    "operationId": "API_questionRevision",
                    "description": "Returns a question revision with the given id. If cannot find question revision, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/QuestionRevision"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/reviewCycle/{id}": {
                "get": {
                    "operationId": "API_reviewCycle",
                    "description": "Returns a review cycle with the given id. If cannot find review cycle, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/ReviewCycle"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/reviewCycle/{id}/reviewees": {
                "get": {
                    "operationId": "API_reviewCycle_reviewees",
                    "description": "Returns a paginated list of all reviewees in a review cycle",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Reviewee"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/reviewCycle/{id}/reviews": {
                "get": {
                    "operationId": "API_reviewCycle_reviews",
                    "description": "Returns a paginated list of all of the reviews for a review cycle",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Review"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/reviewCycles": {
                "get": {
                    "operationId": "API_reviewCycles",
                    "description": "Returns a paginated list of all review cycles in Lattice",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ReviewCycle"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/reviewee/{id}": {
                "get": {
                    "operationId": "API_reviewee",
                    "description": "Returns a reviewee with the given id. If cannot find reviewee, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Reviewee"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/reviewee/{id}/reviews": {
                "get": {
                    "operationId": "API_reviewee_reviews",
                    "description": "Returns a paginated list of all of the reviews for a reviewee",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Review"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/tag/{id}": {
                "get": {
                    "operationId": "API_tag",
                    "description": "Retuns a tag with a given id. If cannot find tag, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Tag"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/tags": {
                "get": {
                    "operationId": "API_tags",
                    "description": "Returns a paginated list of all tags in Lattice",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Tag"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/task/{id}": {
                "get": {
                    "operationId": "API_task",
                    "description": "Retuns a task with a given id. If cannot find task, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/update/{id}": {
                "get": {
                    "operationId": "API_update",
                    "description": "Returns an Update with the given id. If cannot find update, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Update"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/updates": {
                "get": {
                    "operationId": "API_updates",
                    "description": "Returns a paginated list of all Updates in Lattice",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Update"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/user/{id}": {
                "get": {
                    "operationId": "API_user",
                    "description": "Returns a user with the given id. If cannot find user, returns a 404",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Could not find the requested resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/user/{id}/directReports": {
                "get": {
                    "operationId": "API_user_directReports",
                    "description": "Returns a list of users that report to a user",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/user/{id}/customAttributes": {
                "get": {
                    "operationId": "API_user_customAttributes",
                    "description": "Returns a list of the user's custom attributes",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/UserCustomAttribute"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/user/{id}/goals": {
                "get": {
                    "operationId": "API_user_goals",
                    "description": "Returns a paginated list of all of the goals owned by a user",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "state",
                            "required": false,
                            "schema": {
                                "$ref": "#/components/schemas/GoalStateEnum"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Goal"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/user/{id}/tasks": {
                "get": {
                    "operationId": "API_user_tasks",
                    "description": "Returns a paginated list of tasks in Lattice",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "path",
                            "name": "id",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/v1/users": {
                "get": {
                    "operationId": "API_users",
                    "description": "Returns a paginated list of users in Lattice. By default, returns active users. A 'status' parameter of 'null' will retrieve all users regardless of status.",
                    "tags": [],
                    "parameters": [
                        {
                            "in": "query",
                            "name": "limit",
                            "required": false,
                            "schema": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        {
                            "in": "query",
                            "name": "startingAfter",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "in": "query",
                            "name": "status",
                            "required": false,
                            "schema": {
                                "$ref": "#/components/schemas/UserStatusEnumWithNullStringValue"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "The resolved response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "object",
                                            "hasMore",
                                            "data"
                                        ],
                                        "properties": {
                                            "object": {
                                                "type": "string",
                                                "enum": [
                                                    "list"
                                                ]
                                            },
                                            "hasMore": {
                                                "type": "boolean",
                                                "description": "Whether or not there are more elements available after this set. If false, this set comprises the end of the list."
                                            },
                                            "endingCursor": {
                                                "type": "string",
                                                "description": "The cursor to use to get the next set of items in the list"
                                            },
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Invalid request parameters",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Server error while fetching resource",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "required": [
                                            "error"
                                        ],
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "description": "Description of what went wrong"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "components": {
            "securitySchemes": {
                "BearerAuth": {
                    "type": "http",
                    "scheme": "bearer"
                }
            },
            "schemas": {
                "CustomAttribute": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "name",
                        "type",
                        "visibility"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The API id of this object"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The URL of this object"
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the custom attribute"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the custom attribute"
                        },
                        "visibility": {
                            "$ref": "#/components/schemas/UserFieldVisibilitySettingEnumType",
                            "description": "Who can see this custom attribute"
                        }
                    }
                },
                "UserFieldVisibilitySettingEnumType": {
                    "type": "string",
                    "enum": [
                        "Admin",
                        "AdminManager",
                        "AdminManagerEmployee",
                        "Everyone"
                    ]
                },
                "CustomAttributeValue": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The API id of this object"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The URL of this object"
                        },
                        "value": {
                            "type": "string",
                            "description": "The displayed value of the custom attribute"
                        }
                    }
                },
                "Department": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "name",
                        "createdAt"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the department"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The url of this object"
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the department"
                        },
                        "description": {
                            "type": "string",
                            "description": "The description of the department. This text can be in markdown"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the feedback was created"
                        }
                    }
                },
                "Feedback": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "author",
                        "targets",
                        "associatedValues",
                        "body",
                        "isPublic",
                        "createdAt"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the feedback"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The url of this object"
                        },
                        "author": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user that wrote the feedback. This field can be expanded with the `expand` parameter"
                        },
                        "targets": {
                            "$ref": "#/components/schemas/FeedbackTargetsList",
                            "description": "The list of users that the feedback was about. This field can be expanded with the `expand` parameter"
                        },
                        "associatedValues": {
                            "$ref": "#/components/schemas/CompanyValuesList",
                            "description": "The list of associated company values with this feedback"
                        },
                        "feedbackRequest": {
                            "$ref": "#/components/schemas/FeedbackRequest",
                            "description": "The inciting request for this feedback. null if this feedback was unsolicited"
                        },
                        "body": {
                            "type": "string",
                            "description": "The text of feedback given"
                        },
                        "competency": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The competency associated with the feedback request that this is in response to"
                        },
                        "visibility": {
                            "type": "string",
                            "description": "Who can see this feedback"
                        },
                        "isPublic": {
                            "type": "boolean",
                            "description": "Was this feedback shared in a way where anyone in the company can view it"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the feedback was created"
                        }
                    }
                },
                "ObjectReference": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The id of the referenced object"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of the referenced object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The url of the referenced object"
                        }
                    }
                },
                "User": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "directReports",
                        "email",
                        "tasks",
                        "title",
                        "status",
                        "isAdmin",
                        "customAttributes"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The URL of this object"
                        },
                        "manager": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The manager of the user"
                        },
                        "directReports": {
                            "$ref": "#/components/schemas/ListReference",
                            "description": "The list of users that report to this user"
                        },
                        "department": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The department this user belongs to. This field can be expanded with the `expand` parameter"
                        },
                        "name": {
                            "type": "string",
                            "description": "The full name of the user"
                        },
                        "preferredName": {
                            "type": "string",
                            "description": "The preferred name of the user"
                        },
                        "email": {
                            "type": "string",
                            "description": "The email of the user"
                        },
                        "tasks": {
                            "$ref": "#/components/schemas/ListReference",
                            "description": "The list of pending tasks this user"
                        },
                        "title": {
                            "type": "string",
                            "description": "The title of the user"
                        },
                        "status": {
                            "$ref": "#/components/schemas/UserStatusEnum",
                            "description": "The active status of the user"
                        },
                        "startDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The day the user started"
                        },
                        "birthDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The day the user was born"
                        },
                        "timezone": {
                            "type": "string",
                            "description": "The user's preferred timezone. Falls back to company's timezone if not set"
                        },
                        "gender": {
                            "$ref": "#/components/schemas/Gender",
                            "description": "The gender of the user"
                        },
                        "isAdmin": {
                            "type": "boolean",
                            "description": "Does this user have admin permissions in Lattice"
                        },
                        "externalUserId": {
                            "type": "string",
                            "description": "The external user ID associated with the user (typically set by their HRIS)"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the user was created"
                        },
                        "updatedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the user was last updated"
                        },
                        "customAttributes": {
                            "$ref": "#/components/schemas/ListReference",
                            "description": "A list of the user's custom attributes"
                        }
                    }
                },
                "ListReference": {
                    "type": "object",
                    "required": [
                        "object",
                        "url"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "url": {
                            "type": "string",
                            "description": "The url to retrieve the list"
                        }
                    }
                },
                "UserStatusEnum": {
                    "type": "string",
                    "description": "A lifecycle status for a user",
                    "enum": [
                        "ACTIVE",
                        "INVITED",
                        "CREATED",
                        "DEACTIVATED"
                    ]
                },
                "Gender": {
                    "type": "string",
                    "description": "The gender a user can set on their profile",
                    "enum": [
                        "Female",
                        "Male",
                        "NonBinary"
                    ]
                },
                "FeedbackTargetsList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ObjectReference"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "FeedbackExpandedTargetsList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/User"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "CompanyValuesList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/CompanyValue"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "CompanyValue": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "name"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the value"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the value"
                        },
                        "description": {
                            "type": "string",
                            "description": "The human readable description of the value"
                        }
                    }
                },
                "FeedbackRequest": {
                    "type": "object",
                    "required": [
                        "object",
                        "author",
                        "target",
                        "subject",
                        "body",
                        "createdAt"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "author": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user that requested the feedback"
                        },
                        "target": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user that was requested to write the feedback. This should be the same user as the author of the feedback object"
                        },
                        "subject": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user that the author asked the target to write about. This should be the same user as the target of the feedback object"
                        },
                        "body": {
                            "type": "string",
                            "description": "The text of feedback request"
                        },
                        "competency": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The competency associated with this feedback request"
                        },
                        "fulfilledAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the feedback request was fulfilled. This should be the same time as the feedback createdAt"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the feedback request was created"
                        }
                    }
                },
                "Competency": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "name"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The API ID of the Competency"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the competency"
                        },
                        "description": {
                            "type": "string",
                            "description": "The description of the competency"
                        }
                    }
                },
                "Goal": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "owners",
                        "childGoals",
                        "tags",
                        "name",
                        "state",
                        "goalType",
                        "isPrivate",
                        "dueDate",
                        "createdAt",
                        "updatedAt"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The URL of this object"
                        },
                        "owners": {
                            "$ref": "#/components/schemas/GoalOwnersList",
                            "description": "A list of the users who are the owners of this goal. This field can be expanded with the `expand` parameter"
                        },
                        "department": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The department is associated to. This will always be null unless this is a department goal. This field can be expanded with the `expand` parameter"
                        },
                        "parentGoal": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The parent of this goal in the goal tree. This field can be expanded with the `expand` parameter"
                        },
                        "childGoals": {
                            "$ref": "#/components/schemas/GoalChildGoalsList",
                            "description": "The child goals (aka key results) of this goal in the goal tree. This field can be expanded with the `expand` parameter"
                        },
                        "tags": {
                            "$ref": "#/components/schemas/GoalTagsList",
                            "description": "The tags associated with this goal. This field can be expanded with the `expand` parameter"
                        },
                        "name": {
                            "type": "string",
                            "description": "The given name of the goal. This is often the objective"
                        },
                        "description": {
                            "type": "string",
                            "description": "The markdown text description of the goal"
                        },
                        "state": {
                            "$ref": "#/components/schemas/GoalStateEnum",
                            "description": "The lifecycle state a goal is in"
                        },
                        "status": {
                            "$ref": "#/components/schemas/GoalStatusEnum",
                            "description": "The completion status of the goal"
                        },
                        "goalType": {
                            "$ref": "#/components/schemas/GoalTypeEnum",
                            "description": "The type of this goal"
                        },
                        "priority": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The priority set for the goal"
                        },
                        "amountType": {
                            "$ref": "#/components/schemas/GoalAmountType",
                            "description": "The type of the amount being tracked"
                        },
                        "startingAmount": {
                            "type": "number",
                            "format": "float",
                            "description": "The starting amount when the goal was set. Should not change after goal is set (unless edited). null if the goal is binary"
                        },
                        "endingAmount": {
                            "type": "number",
                            "format": "float",
                            "description": "The target amount to get to. Should not change after goal is set (unless edited). null if the goal is binary"
                        },
                        "currentAmount": {
                            "type": "number",
                            "format": "float",
                            "description": "The current amount the goal is at. This will change over time as the goal is updated. Should no longer change once the goal is ended or archived"
                        },
                        "isPrivate": {
                            "type": "boolean",
                            "description": "True if the goal is private and should only be shown to a subset of users"
                        },
                        "dueDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The scheduled date the goal should be completed by"
                        },
                        "startDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The date the goal starts"
                        },
                        "lastUpdatedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The last time an update was made against this goal. This is different than the \"updatedAt\" field which is the last time the goal itself was changed"
                        },
                        "publishedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the goal was taken active"
                        },
                        "completedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the goal was archived"
                        },
                        "archivedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the goal was archived"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the goal was created"
                        },
                        "updatedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the goal was last updated"
                        }
                    }
                },
                "GoalOwnersList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ObjectReference"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "GoalExpandedOwnersList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/User"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "GoalChildGoalsList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ObjectReference"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "GoalExpandedChildGoalsList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Goal"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "GoalTagsList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ObjectReference"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "GoalExpandedTagsList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Tag"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "Tag": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "name",
                        "createdAt",
                        "updatedAt"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the tag"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The URL of this object"
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the tag"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the tag was created"
                        },
                        "updatedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the tag was last updated"
                        }
                    }
                },
                "GoalStateEnum": {
                    "type": "string",
                    "enum": [
                        "Draft",
                        "Active",
                        "Ended",
                        "Archived"
                    ]
                },
                "GoalStatusEnum": {
                    "type": "string",
                    "enum": [
                        "NotUpdated",
                        "OnTrack",
                        "Progressing",
                        "OffTrack"
                    ]
                },
                "GoalTypeEnum": {
                    "type": "string",
                    "enum": [
                        "Company",
                        "Department",
                        "Group",
                        "Individual"
                    ]
                },
                "GoalAmountType": {
                    "type": "string",
                    "enum": [
                        "Percent",
                        "Dollar",
                        "Digit",
                        "Binary"
                    ]
                },
                "Question": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "body",
                        "hasFreeFormText"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the review"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "body": {
                            "type": "string",
                            "description": "The text of the question being asked"
                        },
                        "description": {
                            "type": "string",
                            "description": "The description of the question. This text can be in markdown"
                        },
                        "hasFreeFormText": {
                            "type": "boolean",
                            "description": "Does this question ask for a free form text response"
                        },
                        "ratingScale": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Rating"
                            },
                            "description": "The qualitative rating scale for this question. null if this is not a rating question"
                        },
                        "choices": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "The choices aviable for multiple choice/select. null if this is not a multiple choice question"
                        }
                    }
                },
                "Rating": {
                    "type": "object",
                    "required": [
                        "value",
                        "descriptor"
                    ],
                    "properties": {
                        "value": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The numeric rating value"
                        },
                        "descriptor": {
                            "type": "string",
                            "description": "The qualitative descriptor for this rating"
                        }
                    }
                },
                "QuestionRevision": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "body"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the review"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "body": {
                            "type": "string",
                            "description": "The text of the question being asked"
                        },
                        "description": {
                            "type": "string",
                            "description": "The description of the question. This text can be in markdown"
                        },
                        "ratingScale": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Rating"
                            },
                            "description": "The qualitative rating scale for this question. null if this is not a rating question"
                        },
                        "choices": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "The choices aviable for multiple choice/select. null if this is not a multiple choice question"
                        }
                    }
                },
                "ReviewCycle": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "reviewees",
                        "reviews",
                        "name",
                        "stage",
                        "createdAt",
                        "updatedAt"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the review"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "creator": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The creator of the review cycle"
                        },
                        "reviewees": {
                            "$ref": "#/components/schemas/ListReference",
                            "description": "The list of users being reviewed in this cycle"
                        },
                        "reviews": {
                            "$ref": "#/components/schemas/ListReference",
                            "description": "The list of all reviews in this review cycle"
                        },
                        "name": {
                            "type": "string",
                            "description": "The given name of the review cycle"
                        },
                        "stage": {
                            "$ref": "#/components/schemas/ReviewCycleStageTypeEnum",
                            "description": "The current stage of the review cycle"
                        },
                        "peerSelectionStartedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time peer selection was kicked off"
                        },
                        "reviewsStartedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time writting reviews was kicked off"
                        },
                        "reviewsEndedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time writting reviews was ended"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the review cycle was created"
                        },
                        "updatedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the review cycle was last updated"
                        }
                    }
                },
                "ReviewCycleStageTypeEnum": {
                    "type": "string",
                    "description": "The type of stages a review cycle can be in",
                    "enum": [
                        "Draft",
                        "PreLaunch",
                        "Launching",
                        "PeerSelection",
                        "CollectingReviews",
                        "Calibration",
                        "Ended"
                    ]
                },
                "Reviewee": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "reviewCycle",
                        "user",
                        "reviews",
                        "createdAt",
                        "updatedAt"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the reviewee"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "reviewCycle": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The review cycle this reviewee is a part of"
                        },
                        "user": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user associated with this reviewee"
                        },
                        "reviews": {
                            "$ref": "#/components/schemas/ListReference",
                            "description": "The list of reviews for this reviewee"
                        },
                        "revieweeFacingPDFUrl": {
                            "type": "string",
                            "description": "The URL of PDF that is shared with the reviewee. If the reviewee is not yet closed returns null"
                        },
                        "managerFacingPDFUrl": {
                            "type": "string",
                            "description": "The URL of PDF that is shared with the reviewee's manager. This PDF may have more sensitive information than what is shared with the reviewee. If the reviewee is not yet closed returns null"
                        },
                        "closedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the reviewee was \"closed\". A reviewee is closed when reviews can no longer be summited for the reviewee"
                        },
                        "esignatureGivenAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the reviewee gave their \"e-signature\" in Lattice. Confirming that they received their review packet"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the reviewee was created"
                        },
                        "updatedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the reviewee was last updated"
                        },
                        "responsesReleasedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the reviewee was last updated"
                        }
                    }
                },
                "Review": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "reviewee",
                        "reviewer",
                        "question",
                        "questionRevision",
                        "reviewType"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the review request"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "reviewee": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The reviewee this request is about"
                        },
                        "reviewer": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user writting this review"
                        },
                        "question": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The base question being asked to the reviewer"
                        },
                        "questionRevision": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The revision of the question being asked to the reviewer"
                        },
                        "competency": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The competency this question is possibly in reference to."
                        },
                        "goal": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The goal this quesion is in reference to. Most of the time this will be null."
                        },
                        "reviewType": {
                            "$ref": "#/components/schemas/ReviewType",
                            "description": "The type/direction the review was given"
                        },
                        "response": {
                            "$ref": "#/components/schemas/ReviewResponse",
                            "description": "The response given by the reviewer. Is null if the reviewer has yet to write a response or you don't have the permission to view the response"
                        },
                        "calibratedResponse": {
                            "$ref": "#/components/schemas/ReviewResponse",
                            "description": "The calibrated response given by the reviewer. Is null if the reviewer has yet to write a calibrated response, calibreation is not used for this cycle, the question does not support calibration, or you don't have the permission to view the response"
                        },
                        "submittedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the review request was finalized by the reviewer"
                        },
                        "declinedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the reviewer marked the review request as \"declined\"."
                        },
                        "calibrationEnded": {
                            "type": "boolean",
                            "description": "Whether the calibration phase has ended"
                        }
                    }
                },
                "ReviewType": {
                    "type": "string",
                    "enum": [
                        "Self",
                        "Peer",
                        "Upward",
                        "Downward",
                        "ScoredAttribute"
                    ]
                },
                "ReviewResponse": {
                    "type": "object",
                    "required": [
                        "createdAt",
                        "updatedAt"
                    ],
                    "properties": {
                        "rating": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The numeric rating given by the reviewer. null if the question is not a rating question"
                        },
                        "choices": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "The choices the review chose for the question. If the question only allows for one choice there will be only one choice in the list. null if the question was not multiple choice or select"
                        },
                        "comment": {
                            "type": "string",
                            "description": "The free form text response given by the reiewer. null if the question did not contain free form text"
                        },
                        "commentSentiment": {
                            "type": "number",
                            "format": "float",
                            "description": "The NLP sentiment of the free form text response. Is a number between 1 and 10. Where 1 is the lowest sentiment and 10 is the highest. null if the question did not ask for free form text or sentiment has not been calculated yet"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the response was first created"
                        },
                        "updatedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the response was last updated"
                        }
                    }
                },
                "GiveFeedbackTaskType": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "type",
                        "feedbackRequest"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the task"
                        },
                        "feedbackRequest": {
                            "$ref": "#/components/schemas/FeedbackRequest",
                            "description": "The inciting request for this feedback. null if this feedback was unsolicited"
                        }
                    }
                },
                "UpdateGoalTaskType": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "type"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the task"
                        },
                        "goal": {
                            "$ref": "#/components/schemas/Goal",
                            "description": "undefined"
                        }
                    }
                },
                "PerformReviewTaskType": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "type",
                        "reviewCycle",
                        "totalRequestsCount",
                        "completeRequestsCount"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the task"
                        },
                        "reviewCycle": {
                            "$ref": "#/components/schemas/ReviewCycle",
                            "description": "undefined"
                        },
                        "totalRequestsCount": {
                            "type": "integer",
                            "format": "int32",
                            "description": "undefined"
                        },
                        "completeRequestsCount": {
                            "type": "integer",
                            "format": "int32",
                            "description": "undefined"
                        },
                        "dueAt": {
                            "type": "object",
                            "description": "If the review cycle is on a schedule, the due date for this task will be the review cycle close date. If this isn't a scheduled review cycle, the value will be null."
                        }
                    }
                },
                "ConfirmReceivingPacketTaskType": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "type",
                        "reviewCycle",
                        "reviewee"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the task"
                        },
                        "reviewCycle": {
                            "$ref": "#/components/schemas/ReviewCycle",
                            "description": "undefined"
                        },
                        "reviewee": {
                            "$ref": "#/components/schemas/Reviewee",
                            "description": "undefined"
                        }
                    }
                },
                "FinalizeReviewPacketTaskType": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "type",
                        "reviewCycle",
                        "reviewees"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the task"
                        },
                        "reviewCycle": {
                            "$ref": "#/components/schemas/ReviewCycle",
                            "description": "undefined"
                        },
                        "reviewees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Reviewee"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "PerformPostScoringReviewTaskType": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "type",
                        "reviewCycle",
                        "reviewees"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the task"
                        },
                        "reviewCycle": {
                            "$ref": "#/components/schemas/ReviewCycle",
                            "description": "undefined"
                        },
                        "reviewees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Reviewee"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "SelectPeersTaskType": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "type",
                        "reviewCycle",
                        "reviewees"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the user"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of the task"
                        },
                        "reviewCycle": {
                            "$ref": "#/components/schemas/ReviewCycle",
                            "description": "undefined"
                        },
                        "reviewees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Reviewee"
                            },
                            "description": "undefined"
                        },
                        "dueAt": {
                            "type": "object",
                            "description": "If the review cycle is on a schedule, the due date for this task will be the review cycle close date. If this isn't a scheduled review cycle, the value will be null."
                        }
                    }
                },
                "Update": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "url",
                        "author",
                        "manager",
                        "responses",
                        "isPublic",
                        "createdAt"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the update"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "url": {
                            "type": "string",
                            "description": "The url of this object"
                        },
                        "author": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user that wrote the update. This field can be expanded with the `expand` parameter"
                        },
                        "manager": {
                            "$ref": "#/components/schemas/ObjectReference",
                            "description": "The user that will review this update. This field can be expanded with the `expand` parameter"
                        },
                        "responses": {
                            "$ref": "#/components/schemas/UpdateQuestionsList",
                            "description": "The list of questions and answers in this update"
                        },
                        "sentiment": {
                            "$ref": "#/components/schemas/UpdateSentimentResponse",
                            "description": "The associated sentiment given with this update"
                        },
                        "isPublic": {
                            "type": "boolean",
                            "description": "Was this update shared in a way where anyone in the company can view it"
                        },
                        "publishedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the update was published"
                        },
                        "reviewedAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the update was reviewed by the manager"
                        },
                        "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The time the update was created"
                        }
                    }
                },
                "UpdateQuestionsList": {
                    "type": "object",
                    "required": [
                        "object",
                        "hasMore",
                        "data"
                    ],
                    "properties": {
                        "object": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "hasMore": {
                            "type": "boolean",
                            "description": "undefined"
                        },
                        "endingCursor": {
                            "type": "string",
                            "description": "undefined"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UpdateReponse"
                            },
                            "description": "undefined"
                        }
                    }
                },
                "UpdateReponse": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "question"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the value"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "question": {
                            "type": "string",
                            "description": "The question that was asked by the manager"
                        },
                        "answer": {
                            "type": "string",
                            "description": "(markdown) The response given by the update author"
                        }
                    }
                },
                "UpdateSentimentResponse": {
                    "type": "object",
                    "required": [
                        "id",
                        "object",
                        "rating"
                    ],
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The api id of the value"
                        },
                        "object": {
                            "type": "string",
                            "description": "The type of this object"
                        },
                        "rating": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The sentiment rating submitted"
                        }
                    }
                },
                "UserCustomAttribute": {
                    "type": "object",
                    "required": [
                        "customAttribute",
                        "customAttributeValue"
                    ],
                    "properties": {
                        "customAttribute": {
                            "$ref": "#/components/schemas/CustomAttribute",
                            "description": "undefined"
                        },
                        "customAttributeValue": {
                            "$ref": "#/components/schemas/CustomAttributeValue",
                            "description": "undefined"
                        }
                    }
                },
                "UserStatusEnumWithNullStringValue": {
                    "type": "string",
                    "description": "A lifecycle status for a user or null",
                    "enum": [
                        "ACTIVE",
                        "INVITED",
                        "CREATED",
                        "DEACTIVATED",
                        "NULL"
                    ]
                }
            }
    }
}